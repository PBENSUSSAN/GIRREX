# Generated by Django 5.2.4 on 2025-08-20 12:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FNE",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "id_girrex",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        verbose_name="ID Girrex de l'Événement",
                    ),
                ),
                (
                    "titre",
                    models.CharField(
                        max_length=255, verbose_name="Titre de l'événement"
                    ),
                ),
                ("date_evenement", models.DateField()),
                (
                    "description_globale",
                    models.TextField(
                        blank=True, verbose_name="Analyse globale (QS National)"
                    ),
                ),
                (
                    "numero_oasis",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Numéro OASIS",
                    ),
                ),
                (
                    "type_evenement",
                    models.CharField(
                        choices=[
                            ("ATM", "ATM (Air Traffic Management)"),
                            ("TECHNIQUE", "Technique"),
                            ("AUTRE", "Autre"),
                        ],
                        default="AUTRE",
                        max_length=20,
                    ),
                ),
                (
                    "statut_fne",
                    models.CharField(
                        choices=[
                            ("PRE_DECLAREE", "Pré-déclarée (en attente OASIS)"),
                            ("ATTENTE_INSTRUCTION", "En attente d'instruction"),
                            ("INSTRUCTION_COURS", "Instruction en cours"),
                            ("ATTENTE_PROLONGATION", "En attente de prolongation"),
                            ("CLOTUREE", "Clôturée"),
                            ("CLOTUREE_PROLONGATION", "Clôturée (avec prolongation)"),
                        ],
                        default="PRE_DECLAREE",
                        max_length=30,
                    ),
                ),
                ("date_declaration_oasis", models.DateField(blank=True, null=True)),
                ("echeance_cloture", models.DateField(blank=True, null=True)),
                (
                    "classification_gravite_atm",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "classification_gravite_ats",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "classification_probabilite",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "rapport_cloture_pdf",
                    models.FileField(
                        blank=True, null=True, upload_to="qs/rapports_cloture/%Y/%m/"
                    ),
                ),
                (
                    "presente_en_cdsa_cmsa",
                    models.BooleanField(
                        default=False, verbose_name="Présenté en CDSA/CMSA"
                    ),
                ),
                (
                    "type_cloture",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard"),
                            ("CLS", "Commission Locale de Sécurité"),
                            ("CLM", "Commission Locale Mixte"),
                        ],
                        default="STANDARD",
                        max_length=20,
                    ),
                ),
                ("date_demande_prolongation", models.DateField(blank=True, null=True)),
                ("motif_prolongation", models.TextField(blank=True)),
                ("nouvelle_echeance", models.DateField(blank=True, null=True)),
                (
                    "agent_implique",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="fne_implique",
                        to="core.agent",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="fne",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fiche de Notification d'Événement (FNE)",
                "verbose_name_plural": "Fiches de Notification d'Événement (FNE)",
                "ordering": ["-echeance_cloture"],
            },
        ),
        migrations.CreateModel(
            name="HistoriqueFNE",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="Date et heure effectives de l'événement."
                    ),
                ),
                (
                    "type_evenement",
                    models.CharField(
                        choices=[
                            ("CREATION", "Création du processus d'instruction"),
                            ("DECLARATION_OASIS", "Déclaration OASIS effectuée"),
                            ("COMMENTAIRE", "Commentaire ajouté"),
                            (
                                "CHANGEMENT_STATUT_INSTRUCTION",
                                "Changement d'état de l'instruction",
                            ),
                            ("CLOTURE", "Clôture de la FNE"),
                        ],
                        max_length=40,
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        default=dict,
                        help_text="Données contextuelles de l'événement (ex: le commentaire, l'ancien/nouveau statut).",
                    ),
                ),
                (
                    "auteur",
                    models.ForeignKey(
                        help_text="Utilisateur à l'origine de l'événement.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "fne",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historique_permanent",
                        to="qs.fne",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historique Permanent FNE",
                "verbose_name_plural": "Historiques Permanents FNE",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="RapportExterne",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "organisme_source",
                    models.CharField(max_length=255, verbose_name="Organisme Source"),
                ),
                (
                    "reference_externe",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Référence externe"
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "fichier_joint",
                    models.FileField(
                        blank=True, null=True, upload_to="qs/rapports_externes/%Y/%m/"
                    ),
                ),
                ("date_reception", models.DateField()),
                (
                    "fne",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rapports_externes",
                        to="qs.fne",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rapport Externe",
                "verbose_name_plural": "Rapports Externes",
                "ordering": ["-date_reception"],
            },
        ),
        migrations.CreateModel(
            name="RecommendationQS",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("description", models.TextField()),
                (
                    "priorite",
                    models.CharField(
                        help_text="Ex: Haute, Moyenne, Basse", max_length=50
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("PROPOSEE", "Proposée"),
                            ("ACCEPTEE", "Acceptée"),
                            ("REFUSEE", "Refusée"),
                            ("IMPLEMENTEE", "Implémentée"),
                        ],
                        default="PROPOSEE",
                        max_length=50,
                    ),
                ),
                ("date_emission", models.DateField(auto_now_add=True)),
                ("date_echeance", models.DateField()),
                (
                    "destinataires_externes",
                    models.TextField(
                        blank=True, help_text="Liste d'emails séparés par des virgules"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "destinataires_agents",
                    models.ManyToManyField(blank=True, to="core.agent"),
                ),
                (
                    "destinataires_centres",
                    models.ManyToManyField(blank=True, to="core.centre"),
                ),
                (
                    "responsable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="recommandations_qs_responsable",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recommandation QS",
                "verbose_name_plural": "Recommandations QS",
            },
        ),
    ]
