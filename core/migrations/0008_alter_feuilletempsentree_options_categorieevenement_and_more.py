# Generated by Django 5.2.3 on 2025-07-25 12:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0007_feuilletempscloture"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="feuilletempsentree",
            options={
                "ordering": ["-date_jour", "agent"],
                "permissions": [
                    ("view_feuilletemps", "Peut voir la feuille de temps journalière"),
                    (
                        "change_feuilletemps",
                        "Peut modifier la feuille de temps journalière",
                    ),
                ],
                "verbose_name": "Entrée de Feuille de Temps",
                "verbose_name_plural": "Entrées de Feuille de Temps",
            },
        ),
        migrations.CreateModel(
            name="CategorieEvenement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom de la catégorie (ex: Météo, Visite, Consigne importante)",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description courte de ce que couvre cette catégorie.",
                        max_length=255,
                    ),
                ),
                (
                    "couleur",
                    models.CharField(
                        default="#343a40",
                        help_text="Code couleur hexadécimal pour l'affichage.",
                        max_length=7,
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        help_text="Centre auquel cette catégorie est rattachée.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories_evenements",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie d'Événement",
                "verbose_name_plural": "Catégories d'Événements",
                "ordering": ["centre", "nom"],
                "unique_together": {("nom", "centre")},
            },
        ),
        migrations.CreateModel(
            name="EvenementCentre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_heure_evenement",
                    models.DateTimeField(
                        db_index=True, help_text="Date et heure de l'événement."
                    ),
                ),
                (
                    "titre",
                    models.CharField(
                        help_text="Titre court et descriptif de l'événement.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description détaillée de l'événement ou de la consigne."
                    ),
                ),
                (
                    "notification_generale",
                    models.BooleanField(
                        default=False,
                        help_text="Cochez cette case si cet événement doit faire l'objet d'une notification.",
                        verbose_name="Signaler pour notification générale",
                    ),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                (
                    "auteur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements_consignes",
                        to="core.agent",
                    ),
                ),
                (
                    "categorie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements",
                        to="core.categorieevenement",
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Événement Centre",
                "verbose_name_plural": "Événements Centre",
                "ordering": ["-date_heure_evenement"],
            },
        ),
        migrations.CreateModel(
            name="PanneCentre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "equipement_concerne",
                    models.CharField(
                        help_text="Nom du système ou de l'équipement en panne.",
                        max_length=255,
                    ),
                ),
                (
                    "date_heure_debut",
                    models.DateTimeField(
                        db_index=True, help_text="Date et heure du début de la panne."
                    ),
                ),
                (
                    "date_heure_fin",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date et heure de la résolution de la panne (laisser vide si en cours).",
                        null=True,
                    ),
                ),
                (
                    "criticite",
                    models.CharField(
                        choices=[
                            ("CRITIQUE", "Critique (impact opérationnel direct)"),
                            ("MAJEURE", "Majeure (dégradation notable)"),
                            ("MINEURE", "Mineure (gêne ou problème de confort)"),
                        ],
                        default="MINEURE",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description de la panne et de son impact."
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[("EN_COURS", "En cours"), ("RESOLUE", "Résolue")],
                        default="EN_COURS",
                        max_length=20,
                    ),
                ),
                (
                    "notification_generale",
                    models.BooleanField(
                        default=False,
                        help_text="Cochez cette case si cette panne doit faire l'objet d'une notification.",
                        verbose_name="Signaler pour notification générale",
                    ),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                (
                    "auteur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pannes_consignees",
                        to="core.agent",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pannes",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Panne Centre",
                "verbose_name_plural": "Pannes Centre",
                "ordering": ["-date_heure_debut"],
                "permissions": [
                    ("resolve_pannecentre", "Peut marquer une panne comme résolue")
                ],
            },
        ),
    ]
