# Generated by Django 5.2.4 on 2025-08-14 09:10

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Centre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom_centre",
                    models.CharField(
                        help_text="Nom complet du centre (ex: DGA Essais en vol Istres)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "code_centre",
                    models.CharField(
                        help_text="Code mnémonique du centre (ex: IS, CA, TO)",
                        max_length=10,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Centre",
                "verbose_name_plural": "Centres",
                "ordering": ["code_centre"],
            },
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(max_length=255, unique=True)),
                ("contact", models.CharField(blank=True, max_length=255)),
                ("email", models.EmailField(blank=True, max_length=254)),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
                "ordering": ["nom"],
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id_module",
                    models.IntegerField(
                        help_text="ID legacy du module provenant du CSV",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("module_type", models.CharField(blank=True, max_length=100)),
                ("module", models.CharField(blank=True, max_length=255)),
                ("item", models.CharField(blank=True, max_length=255)),
                (
                    "numero",
                    models.CharField(
                        blank=True,
                        db_column="numero",
                        max_length=50,
                        verbose_name="Numéro",
                    ),
                ),
                ("sujet", models.TextField(blank=True)),
                (
                    "date",
                    models.DateField(
                        blank=True,
                        help_text="Date de la dernière mise à jour du contenu du module",
                        null=True,
                    ),
                ),
                ("validite", models.DateField(blank=True, null=True)),
                ("support", models.CharField(blank=True, max_length=50)),
                (
                    "precisions",
                    models.TextField(blank=True, verbose_name="Sujet / Précisions"),
                ),
            ],
            options={
                "verbose_name": "Module de Formation (Catalogue)",
                "verbose_name_plural": "Modules de Formation (Catalogue)",
            },
        ),
        migrations.CreateModel(
            name="Organisme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom_organisme", models.CharField(max_length=255, unique=True)),
                (
                    "type_organisme",
                    models.CharField(
                        blank=True,
                        help_text="Ex: Interne, ENAC, Partenaire industriel",
                        max_length=100,
                    ),
                ),
                ("agrement", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "verbose_name": "Organisme de Formation",
                "verbose_name_plural": "Organismes de Formation",
            },
        ),
        migrations.CreateModel(
            name="Parametre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom technique du paramètre",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("description", models.TextField()),
                ("valeur_defaut", models.CharField(max_length=255)),
                (
                    "type_valeur",
                    models.CharField(
                        choices=[
                            ("string", "Texte"),
                            ("integer", "Entier"),
                            ("boolean", "Booléen"),
                            ("date", "Date"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "Paramètre",
                "verbose_name_plural": "Paramètres",
            },
        ),
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "id_agent",
                    models.IntegerField(
                        help_text="ID legacy unique provenant des fichiers CSV",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True,
                        help_text="Référence de l'agent (colonne 'Nom' dans agents.csv, ex: 'BO3')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "trigram",
                    models.CharField(
                        blank=True,
                        help_text="Trigramme unique de l'agent",
                        max_length=10,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Nom de famille"
                    ),
                ),
                (
                    "prenom",
                    models.CharField(blank=True, max_length=100, verbose_name="Prénom"),
                ),
                ("date_naissance", models.DateField(blank=True, null=True)),
                ("nationalite", models.CharField(blank=True, max_length=100)),
                (
                    "actif",
                    models.BooleanField(
                        default=True,
                        help_text="Indique si l'agent est actuellement en service actif",
                    ),
                ),
                (
                    "type_agent",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("controleur", "Contrôleur"),
                            ("administratif", "Administratif"),
                            ("technique", "Technique"),
                            ("autre", "Autre"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Compte utilisateur associé",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agents",
                        to="core.centre",
                        verbose_name="Centre de rattachement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Agent",
                "verbose_name_plural": "Agents",
                "ordering": ["trigram", "reference"],
            },
        ),
        migrations.CreateModel(
            name="CategorieEvenement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom de la catégorie (ex: Météo, Visite, Consigne importante)",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description courte de ce que couvre cette catégorie.",
                        max_length=255,
                    ),
                ),
                (
                    "couleur",
                    models.CharField(
                        default="#343a40",
                        help_text="Code couleur hexadécimal pour l'affichage.",
                        max_length=7,
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        help_text="Centre auquel cette catégorie est rattachée.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories_evenements",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catégorie d'Événement",
                "verbose_name_plural": "Catégories d'Événements",
                "ordering": ["centre", "nom"],
                "unique_together": {("nom", "centre")},
            },
        ),
        migrations.CreateModel(
            name="AgentRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_debut",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Date de début"
                    ),
                ),
                (
                    "date_fin",
                    models.DateField(
                        blank=True,
                        help_text="Laisser vide si l'attribution est à durée indéterminée.",
                        null=True,
                        verbose_name="Date de fin",
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles_assignes",
                        to="core.agent",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        blank=True,
                        help_text="Obligatoire si le rôle est local ou opérationnel.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribution de Rôle",
                "verbose_name_plural": "Attributions de Rôles",
            },
        ),
        migrations.CreateModel(
            name="Affectation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fonction", models.CharField(max_length=255)),
                ("date_debut", models.DateField()),
                (
                    "date_fin",
                    models.DateField(
                        blank=True,
                        help_text="Laisser vide si l'affectation est en cours",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affectations",
                        to="core.agent",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affectations_personnel",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Affectation",
                "verbose_name_plural": "Affectations",
            },
        ),
        migrations.CreateModel(
            name="CertificatMed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_visite", models.DateField()),
                (
                    "validite",
                    models.DateField(help_text="Date de fin de validité du certificat"),
                ),
                (
                    "classe",
                    models.CharField(help_text="Ex: Classe 1, Classe 2", max_length=50),
                ),
                ("restriction", models.TextField(blank=True)),
                (
                    "suspension",
                    models.DateField(
                        blank=True,
                        help_text="Date de début de la suspension de l'aptitude",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificats_medicaux",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificat Médical",
                "verbose_name_plural": "Certificats Médicaux",
                "ordering": ["-validite"],
            },
        ),
        migrations.CreateModel(
            name="Delegation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_debut",
                    models.DateField(help_text="Début de la période de délégation."),
                ),
                (
                    "date_fin",
                    models.DateField(help_text="Fin de la période de délégation."),
                ),
                (
                    "motivee_par",
                    models.CharField(
                        blank=True,
                        help_text="Raison de la délégation (ex: Congés, Déplacement).",
                        max_length=255,
                    ),
                ),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
                (
                    "agent_role_delegue",
                    models.ForeignKey(
                        help_text="L'assignation de rôle qui est temporairement prêtée.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delegations",
                        to="core.agentrole",
                    ),
                ),
                (
                    "creee_par",
                    models.ForeignKey(
                        help_text="Utilisateur qui a enregistré cette délégation.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="delegations_creees",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "delegant",
                    models.ForeignKey(
                        help_text="L'agent qui donne ses droits.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delegations_donnees",
                        to="core.agent",
                    ),
                ),
                (
                    "delegataire",
                    models.ForeignKey(
                        help_text="L'agent qui reçoit les droits (l'intérimaire).",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delegations_recues",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Délégation de Rôle",
                "verbose_name_plural": "Délégations de Rôles",
                "ordering": ["-date_debut"],
            },
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_eval",
                    models.CharField(max_length=100, verbose_name="Type d'évaluation"),
                ),
                ("annee", models.IntegerField()),
                ("date", models.DateField()),
                (
                    "resultat",
                    models.CharField(
                        choices=[
                            ("satisfaisant", "Satisfaisant"),
                            ("non_satisfaisant", "Non Satisfaisant"),
                            ("en_cours", "En cours"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluations",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Évaluation",
                "verbose_name_plural": "Évaluations",
            },
        ),
        migrations.CreateModel(
            name="EvenementCentre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_heure_evenement",
                    models.DateTimeField(
                        db_index=True, help_text="Date et heure de l'événement."
                    ),
                ),
                (
                    "titre",
                    models.CharField(
                        help_text="Titre court et descriptif de l'événement.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description détaillée de l'événement ou de la consigne."
                    ),
                ),
                (
                    "notification_generale",
                    models.BooleanField(
                        default=False,
                        help_text="Cochez cette case si cet événement doit faire l'objet d'une notification.",
                        verbose_name="Signaler pour notification générale",
                    ),
                ),
                ("cree_le", models.DateTimeField(auto_now_add=True)),
                (
                    "auteur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements_consignes",
                        to="core.agent",
                    ),
                ),
                (
                    "categorie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements",
                        to="core.categorieevenement",
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements",
                        to="core.centre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Événement Centre",
                "verbose_name_plural": "Événements Centre",
                "ordering": ["-date_heure_evenement"],
            },
        ),
        migrations.CreateModel(
            name="Habilitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_hab",
                    models.CharField(
                        max_length=100, verbose_name="Type d'habilitation"
                    ),
                ),
                ("date_obtention", models.DateField()),
                ("date_expiration", models.DateField(blank=True, null=True)),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("valide", "Valide"),
                            ("expiree", "Expirée"),
                            ("revoquee", "Révoquée"),
                        ],
                        default="valide",
                        max_length=50,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="habilitations",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Habilitation",
                "verbose_name_plural": "Habilitations",
            },
        ),
        migrations.CreateModel(
            name="Licence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "id_licence",
                    models.IntegerField(
                        help_text="ID legacy de la licence provenant du CSV",
                        unique=True,
                    ),
                ),
                ("num_licence", models.CharField(blank=True, max_length=50)),
                ("type_licence", models.CharField(blank=True, max_length=100)),
                ("date_delivrance", models.DateField(blank=True, null=True)),
                (
                    "date_validite",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de fin de validité"
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("valide", "Valide"),
                            ("suspendue", "Suspendue"),
                            ("retiree", "Retirée"),
                            ("expiree", "Expirée"),
                        ],
                        default="valide",
                        max_length=50,
                    ),
                ),
                (
                    "renouvellement",
                    models.DateField(
                        blank=True,
                        help_text="Date du dernier renouvellement",
                        null=True,
                    ),
                ),
                (
                    "suspension",
                    models.DateField(
                        blank=True,
                        help_text="Date de début de la suspension",
                        null=True,
                    ),
                ),
                (
                    "retrait",
                    models.DateField(
                        blank=True, help_text="Date du retrait définitif", null=True
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="Agent détenteur de la licence",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="licences",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Licence",
                "verbose_name_plural": "Licences",
            },
        ),
        migrations.CreateModel(
            name="Mention",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_mention",
                    models.CharField(max_length=100, verbose_name="Type de mention"),
                ),
                ("date_obtention", models.DateField()),
                ("date_validite", models.DateField(blank=True, null=True)),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("valide", "Valide"),
                            ("en_cours", "En cours"),
                            ("expiree", "Expirée"),
                        ],
                        default="valide",
                        max_length=50,
                    ),
                ),
                (
                    "licence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentions",
                        to="core.licence",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mention",
                "verbose_name_plural": "Mentions",
            },
        ),
        migrations.CreateModel(
            name="Formation",
            fields=[
                (
                    "id_formation",
                    models.IntegerField(
                        help_text="ID legacy de la formation suivie provenant du CSV",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True, help_text="Date précise de la formation", null=True
                    ),
                ),
                (
                    "annee",
                    models.IntegerField(
                        blank=True,
                        help_text="Année de la formation, si la date n'est pas connue",
                        null=True,
                    ),
                ),
                (
                    "duree",
                    models.CharField(
                        blank=True,
                        help_text="Durée en jours, ou texte (ex: 'EPNER')",
                        max_length=20,
                    ),
                ),
                (
                    "resultat",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("reussi", "Réussi"),
                            ("echoue", "Échoué"),
                            ("en_cours", "En cours"),
                            ("planifie", "Planifié"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="formations",
                        to="core.agent",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions_formation",
                        to="core.module",
                    ),
                ),
                (
                    "organisme",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="formations_dispensees",
                        to="core.organisme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Formation Suivie",
                "verbose_name_plural": "Formations Suivies",
                "ordering": ["-annee", "-date"],
            },
        ),
        migrations.CreateModel(
            name="PositionJour",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom court et unique de la position (ex: 'J1', 'Q2', 'RTT', 'MIS')",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description complète (ex: 'Journée normale', 'Mission extérieure')",
                        max_length=255,
                    ),
                ),
                (
                    "categorie",
                    models.CharField(
                        choices=[
                            ("SITE", "Travail sur site"),
                            ("HORS_SITE", "Travail hors site"),
                            ("NON_TRAVAIL", "Non travail"),
                        ],
                        help_text="Classification de la position pour les statistiques et règles.",
                        max_length=20,
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "couleur",
                    models.CharField(
                        default="#FFFFFF",
                        help_text="Code couleur hexadécimal (ex: #4169E1). Le blanc est la couleur par défaut.",
                        max_length=7,
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="positions_jour",
                        to="core.centre",
                        verbose_name="Centre associé",
                    ),
                ),
            ],
            options={
                "verbose_name": "Position Jour (Planning)",
                "verbose_name_plural": "Positions Jour (Planning)",
                "ordering": ["centre", "nom"],
                "unique_together": {("centre", "nom")},
            },
        ),
        migrations.CreateModel(
            name="Qualification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_qualif",
                    models.CharField(
                        max_length=100, verbose_name="Type de qualification"
                    ),
                ),
                ("date_obtention", models.DateField()),
                ("date_validite", models.DateField()),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("valide", "Valide"),
                            ("en_cours", "En cours de validation"),
                            ("expiree", "Expirée"),
                        ],
                        default="valide",
                        max_length=50,
                    ),
                ),
                (
                    "licence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qualifications",
                        to="core.licence",
                    ),
                ),
            ],
            options={
                "verbose_name": "Qualification",
                "verbose_name_plural": "Qualifications",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        choices=[
                            ("ADJOINT_CHEF_DE_CENTRE", "Adjoint Chef de Centre"),
                            ("ADJOINT_CHEF_DE_DIVISION", "Adjoint Chef de Division"),
                            ("ADJOINT_ES", "Adjoint ES"),
                            ("ADJOINT_FORM", "Adjoint Form"),
                            ("ADJOINT_QS", "Adjoint QS"),
                            ("CHEF_DE_CENTRE", "Chef de Centre"),
                            ("CHEF_DE_DIVISION", "Chef de Division"),
                            ("CHEF_DE_QUART", "Chef de Quart"),
                            ("CONTROLEUR", "Contrôleur"),
                            ("FORM_LOCAL", "Formateur Local"),
                            ("QS_LOCAL", "QS Local"),
                            ("RESPONSABLE_SMS", "Responsable SMS"),
                            ("SMS_LOCAL", "SMS Local"),
                            ("ES_LOCAL", "ES Local"),
                            ("ADJOINT_CONFORMITE", "Adjoint Conformité"),
                            ("COORDONATEUR", "Coordonnateur"),
                        ],
                        max_length=50,
                        unique=True,
                        verbose_name="Nom du Rôle",
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("CENTRAL", "Central"),
                            ("LOCAL", "Local"),
                            ("OPERATIONNEL", "Opérationnel"),
                        ],
                        max_length=20,
                        verbose_name="Portée du rôle",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("ENCADREMENT", "Encadrement"),
                            ("MANAGEMENT", "Management"),
                            ("EXECUTION", "Exécution"),
                        ],
                        max_length=20,
                        verbose_name="Niveau hiérarchique",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Les ensembles de permissions techniques que ce rôle confère.",
                        to="auth.group",
                        verbose_name="Groupes de permissions associés",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rôle / Fonction Métier",
                "verbose_name_plural": "Rôles / Fonctions Métier",
                "ordering": ["scope", "level", "nom"],
            },
        ),
        migrations.AddField(
            model_name="agentrole",
            name="role",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="agents_assignes",
                to="core.role",
            ),
        ),
        migrations.CreateModel(
            name="ServiceJournalier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_jour", models.DateField(db_index=True)),
                ("heure_ouverture", models.TimeField(verbose_name="Heure d'ouverture")),
                (
                    "heure_cloture",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Heure de clôture"
                    ),
                ),
                (
                    "date_visa",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date du visa"
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("OUVERTE", "Ouverte"),
                            ("CLOTUREE", "Clôturée"),
                            ("VISEE", "Visée"),
                        ],
                        default="OUVERTE",
                        max_length=10,
                    ),
                ),
                (
                    "cdq_cloture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services_clotures",
                        to="core.agent",
                        verbose_name="CDQ de clôture",
                    ),
                ),
                (
                    "cdq_ouverture",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services_ouverts",
                        to="core.agent",
                        verbose_name="CDQ d'ouverture",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services_journaliers",
                        to="core.centre",
                    ),
                ),
                (
                    "cloture_par",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="journees_cloturees_trace",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ouvert_par",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="journees_initialisees",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vise_par",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="services_vises",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Visé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Journalier",
                "verbose_name_plural": "Services Journaliers",
                "ordering": ["-date_jour", "centre"],
                "permissions": [
                    (
                        "open_close_service",
                        "Peut ouvrir et clôturer le service journalier",
                    ),
                    ("visa_service", "Peut viser un service journalier clôturé"),
                    ("reopen_service", "Peut rouvrir un service journalier clôturé"),
                ],
                "unique_together": {("centre", "date_jour")},
            },
        ),
        migrations.CreateModel(
            name="ServiceJournalierHistorique",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_action",
                    models.CharField(
                        choices=[
                            ("OUVERTURE", "Ouverture"),
                            ("CLOTURE", "Clôture"),
                            ("REOUVERTURE", "Réouverture"),
                        ],
                        default="OUVERTURE",
                        max_length=20,
                        verbose_name="Type d'action",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, verbose_name="Horodatage"),
                ),
                (
                    "agent_action",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.agent",
                        verbose_name="Agent",
                    ),
                ),
                (
                    "modifie_par",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
                (
                    "service_journalier",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historique",
                        to="core.servicejournalier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historique du Service Journalier",
                "verbose_name_plural": "Historiques des Services Journaliers",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TourDeService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("commentaire", models.TextField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tours_de_service",
                        to="core.agent",
                    ),
                ),
                (
                    "modifie_par",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "position_apres_midi",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="affectations_apres_midi",
                        to="core.positionjour",
                    ),
                ),
                (
                    "position_matin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="affectations_matin",
                        to="core.positionjour",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tour de Service",
                "verbose_name_plural": "Tours de Service",
                "ordering": ["-date", "agent"],
                "unique_together": {("agent", "date")},
            },
        ),
        migrations.CreateModel(
            name="TourDeServiceHistorique",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("commentaire", models.TextField(blank=True, null=True)),
                ("modifie_le", models.DateTimeField()),
                (
                    "type_modification",
                    models.CharField(
                        choices=[
                            ("CREATION", "Création"),
                            ("MODIFICATION", "Modification"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.agent",
                    ),
                ),
                (
                    "modifie_par",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="historique_tours_modifies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "position_apres_midi",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.positionjour",
                    ),
                ),
                (
                    "position_matin",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.positionjour",
                    ),
                ),
                (
                    "tour_de_service_original",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="historique",
                        to="core.tourdeservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historique de Tour de Service",
                "verbose_name_plural": "Historiques des Tours de Service",
                "ordering": ["-modifie_le"],
            },
        ),
        migrations.CreateModel(
            name="VersionTourDeService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "annee",
                    models.IntegerField(help_text="L'année du planning (ex: 2025)"),
                ),
                (
                    "mois",
                    models.IntegerField(
                        help_text="Le mois du planning (ex: 7 pour Juillet)"
                    ),
                ),
                (
                    "numero_version",
                    models.CharField(
                        editable=False,
                        help_text="Identifiant unique de la version (ex: 072025-1)",
                        max_length=20,
                    ),
                ),
                (
                    "date_validation",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="La date et l'heure exactes de la validation.",
                    ),
                ),
                (
                    "donnees_planning",
                    models.JSONField(
                        help_text="Snapshot complet du planning au moment de la validation."
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions_planning",
                        to="core.centre",
                    ),
                ),
                (
                    "valide_par",
                    models.ForeignKey(
                        help_text="L'utilisateur qui a validé cette version.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Version Validée de Tour de Service",
                "verbose_name_plural": "Versions Validées de Tour de Service",
                "ordering": ["-annee", "-mois", "-date_validation"],
            },
        ),
        migrations.CreateModel(
            name="Vol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_demande", models.DateField(auto_now_add=True)),
                ("date_vol", models.DateField()),
                ("heure_debut", models.TimeField()),
                ("heure_fin", models.TimeField()),
                (
                    "etat",
                    models.CharField(
                        choices=[
                            ("en_attente", "En attente"),
                            ("planifie", "Planifié"),
                            ("en_cours", "En cours"),
                            ("realise", "Réalisé"),
                            ("annule", "Annulé"),
                        ],
                        default="en_attente",
                        max_length=50,
                    ),
                ),
                (
                    "type_vol",
                    models.CharField(
                        choices=[("CAG", "CAG"), ("CAM", "CAM")], max_length=10
                    ),
                ),
                ("commentaire", models.TextField(blank=True)),
                (
                    "cca",
                    models.ForeignKey(
                        help_text="Agent en charge de la coordination du vol (CCA)",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vols_en_charge_cca",
                        to="core.agent",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vols",
                        to="core.centre",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vols",
                        to="core.client",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vol",
                "verbose_name_plural": "Vols",
                "ordering": ["-date_vol", "heure_debut"],
            },
        ),
        migrations.CreateModel(
            name="ControleVol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("heure_prise_en_charge", models.DateTimeField()),
                ("heure_fin_prise_en_charge", models.DateTimeField()),
                (
                    "type_vol",
                    models.CharField(
                        choices=[("CAG", "CAG"), ("CAM", "CAM")],
                        help_text="Type de contrôle réellement effectué",
                        max_length=10,
                    ),
                ),
                (
                    "controleur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vols_controles",
                        to="core.agent",
                    ),
                ),
                (
                    "vol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prises_en_charge",
                        to="core.vol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Prise en charge de vol",
                "verbose_name_plural": "Prises en charge de vols",
                "ordering": ["heure_prise_en_charge"],
            },
        ),
        migrations.CreateModel(
            name="Zone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        help_text="Nom court et clair de la zone.", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description plus détaillée de la zone et de ses limites ou fonctions.",
                    ),
                ),
                (
                    "est_active",
                    models.BooleanField(
                        default=False, verbose_name="Actuellement active"
                    ),
                ),
                (
                    "derniere_activite",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière activité"
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        help_text="Le centre auquel cette zone est rattachée.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="zones",
                        to="core.centre",
                    ),
                ),
                (
                    "dernier_agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="zones_modifiees",
                        to="core.agent",
                        verbose_name="Dernier agent intervenu",
                    ),
                ),
            ],
            options={
                "verbose_name": "Zone",
                "verbose_name_plural": "Zones",
                "ordering": ["centre", "nom"],
                "unique_together": {("centre", "nom")},
            },
        ),
        migrations.CreateModel(
            name="ActiviteZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_action",
                    models.CharField(
                        choices=[
                            ("ACTIVATION", "Activation"),
                            ("DESACTIVATION", "Désactivation"),
                        ],
                        max_length=20,
                        verbose_name="Type d'action",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        verbose_name="Horodatage de l'action",
                    ),
                ),
                (
                    "agent_action",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.agent",
                        verbose_name="Agent ayant effectué l'action",
                    ),
                ),
                (
                    "service_journalier",
                    models.ForeignKey(
                        help_text="Lie l'activité au service journalier qui était ouvert.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activites_zone_du_jour",
                        to="core.servicejournalier",
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historique_activites",
                        to="core.zone",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activité de Zone",
                "verbose_name_plural": "Activités des Zones",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AuditHeuresControle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "periode",
                    models.CharField(
                        help_text="Format libre, ex: '2024-Q1', '2024-03'",
                        max_length=50,
                    ),
                ),
                ("heures_CAG", models.FloatField(default=0.0)),
                ("heures_CAM", models.FloatField(default=0.0)),
                ("date_audit", models.DateField(auto_now_add=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audits_heures",
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit d'heures de contrôle",
                "verbose_name_plural": "Audits d'heures de contrôle",
                "unique_together": {("agent", "periode")},
            },
        ),
        migrations.CreateModel(
            name="FeuilleTempsVerrou",
            fields=[
                (
                    "centre",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="verrou_feuille_temps",
                        serialize=False,
                        to="core.centre",
                    ),
                ),
                ("verrouille_a", models.DateTimeField(auto_now_add=True)),
                (
                    "chef_de_quart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.agent"
                    ),
                ),
            ],
            options={
                "verbose_name": "Verrou d'édition de Feuille de Temps",
            },
        ),
        migrations.CreateModel(
            name="FeuilleTempsEntree",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_jour", models.DateField(db_index=True)),
                ("heure_arrivee", models.TimeField(blank=True, null=True)),
                ("heure_depart", models.TimeField(blank=True, null=True)),
                ("modifie_le", models.DateTimeField(auto_now=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pointages",
                        to="core.agent",
                    ),
                ),
                (
                    "modifie_par",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Entrée de Feuille de Temps",
                "verbose_name_plural": "Entrées de Feuille de Temps",
                "ordering": ["-date_jour", "agent"],
                "permissions": [
                    ("view_feuilletemps", "Peut voir la feuille de temps journalière"),
                    (
                        "change_feuilletemps",
                        "Peut modifier la feuille de temps journalière",
                    ),
                ],
                "unique_together": {("agent", "date_jour")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="agentrole",
            unique_together={("agent", "role", "centre", "date_debut")},
        ),
        migrations.CreateModel(
            name="ValeurParametre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("valeur", models.CharField(max_length=255)),
                (
                    "est_global",
                    models.BooleanField(
                        default=False,
                        help_text="Cochez si la valeur s'applique à tous les centres",
                    ),
                ),
                (
                    "centre",
                    models.ForeignKey(
                        blank=True,
                        help_text="Si ce paramètre est spécifique à un centre",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.centre",
                    ),
                ),
                (
                    "parametre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="valeurs",
                        to="core.parametre",
                    ),
                ),
                (
                    "responsable",
                    models.ForeignKey(
                        help_text="Agent responsable de cette valeur",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.agent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Valeur de Paramètre",
                "verbose_name_plural": "Valeurs de Paramètres",
                "unique_together": {("parametre", "centre")},
            },
        ),
    ]
